# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EmBzPH70-wbCZA5hN1OLgncl3bc_CJZw
"""


import streamlit as st
import pandas as pd
import joblib

# load model
import joblib

# Load model
model = joblib.load('best_model_randomforest.pkl')

# Streamlit app title and description
st.title("Diabetes Prediction Web App")
st.write("Input data manually or upload a CSV file to get predictions.")

# Radio button for input method
option = st.radio("Choose input method", ('Manual input', 'Upload CSV'))

def get_user_input():
    pregnancies = st.number_input("Pregnancies", 0, 20, 1)
    glucose = st.number_input("Glucose", 0, 200, 120)
    blood_pressure = st.number_input("Blood Pressure", 0, 140, 70)
    skin_thickness = st.number_input("Skin Thickness", 0, 100, 20)
    insulin = st.number_input("Insulin", 0, 900, 79)
    bmi = st.number_input("BMI", 0.0, 70.0, 33.6)
    dpf = st.number_input("Diabetes Pedigree Function", 0.0, 3.0, 0.627)
    age = st.number_input("Age", 1, 100, 33)

    data = {
        'Pregnancies': pregnancies,
        'Glucose': glucose,
        'BloodPressure': blood_pressure,
        'SkinThickness': skin_thickness,
        'Insulin': insulin,
        'BMI': bmi,
        'DiabetesPedigreeFunction': dpf,
        'Age': age
    }
    return pd.DataFrame([data])

user_input_df = None

if option == 'Manual input':
    user_input_df = get_user_input()
else:
    uploaded_file = st.file_uploader("Upload CSV", type=['csv'])
    if uploaded_file is not None:
        user_input_df = pd.read_csv(uploaded_file)
        st.write("Uploaded Data Preview:")
        st.dataframe(user_input_df)

if user_input_df is not None:
    if st.button("Submit for Prediction"):
        prediction = model.predict(user_input_df)

        # Check if multiple rows are uploaded
        if len(prediction) == 1:
            result = "ðŸŸ¢ **Not Diabetic**" if prediction[0] == 0 else "ðŸ”´ **Diabetic**"
            st.markdown("### Prediction Result:")
            st.markdown(result)
        else:
            # Map results for multiple predictions
            st.markdown("### Prediction Results:")
            result_labels = ['Not Diabetic' if p == 0 else 'Diabetic' for p in prediction]
            result_df = user_input_df.copy()
            result_df['Prediction'] = result_labels
            st.dataframe(result_df)
